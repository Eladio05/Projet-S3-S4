/*     
------------------------------  SERT DE BACKUP --------------------------------------------------------------


	public void ajouterPoints(int joueur, int nbPointsAAjouter)
	{
		int indiceJoueur = -1; 
		
		if (couleurBloc == "Jaune")
		{
			indiceJoueur = 0;
		}
		else if (couleurBloc == "Violet")
		{
			indiceJoueur = 1;
		}
		else if (couleurBloc == "Bleu")
		{
			indiceJoueur = 2;
		}
		else if (couleurBloc == "Orange")
		{
			indiceJoueur = 3;
		}
		
		Joueur j = this.listeJoueurs.get(indiceJoueur);
		j.setNbPoints(j.getNbPoints() + nbPointsAAjouter);	
	}
	
	public void compterNombrePointsHauteur() 
	{
		String couleurGagnant="";
		int taille = 0;
		
		for(int i=0; i < this.m.getNbQuartiers() ; i++) 
		{
			Quartier q = this.m.getQuartier(i);
			int nbLignes = q.getNbLignes();
			int nbColonnes = q.getNbColonnes();
			
			for (int j=0 ; j < nbLignes ; j=j+1)
			{
				for (int k=0 ; k < nbColonnes ; k=k+1)
				{
					//System.out.println("TEST : " + i + " " + j + " " + k);
					Case c = q.getCase(j, k);
					
					int nbBlocsCase = c.getListeBlocs().size();
					if (nbBlocsCase != 0)
					{
						Bloc dernierBloc = c.getListeBlocs().get(nbBlocsCase - 1);
						int tailleDernierBloc = dernierBloc.getTaille();

						if (tailleDernierBloc > taille)
						{
							taille = tailleDernierBloc;
							couleurGagnant = dernierBloc.getCouleur();
						}
					}
					
					//System.out.println("test " + c + couleurGagnant);
					
				}
			}
			
		}
		
		this.ajouterPoints(couleurGagnant, taille);
	}
	
	
	public void compterNombrePointsPossedeParQuartier()
	{
		for (int i=0 ; i < this.m.getNbQuartiers() ; i=i+1)
		{
			Quartier q = this.m.getQuartier(i);
			int nbLignes = q.getNbLignes();
			int nbColonnes = q.getNbColonnes();
			
			int[] compteurCasesPossedesQuartier = new int[4];
			String[] couleursBlocsJoueurs = {"Jaune", "Violet", "Bleu", "Orange"};
			
			for (int j=0 ; j < nbLignes ; j=j+1)
			{
				for (int k=0 ; k < nbColonnes ; k=k+1)
				{
					Case c = q.getCase(j, k);
					
					int nbBlocsCase = c.getListeBlocs().size();
					if (nbBlocsCase != 0)
					{
						Bloc dernierBloc = c.getListeBlocs().get(nbBlocsCase - 1);
						String couleurDernierBloc = dernierBloc.getCouleur();
						
						if (couleurDernierBloc == "Jaune")
						{
							compteurCasesPossedesQuartier[0] = compteurCasesPossedesQuartier[0] + 1;
						}
						else if (couleurDernierBloc == "Violet")
						{
							compteurCasesPossedesQuartier[1] = compteurCasesPossedesQuartier[1] + 1;
						}
						else if (couleurDernierBloc == "Bleu")
						{
							compteurCasesPossedesQuartier[2] = compteurCasesPossedesQuartier[2] + 1;
						}
						else if (couleurDernierBloc == "Orange")
						{
							compteurCasesPossedesQuartier[2] = compteurCasesPossedesQuartier[2] + 1;
						}
					}
				}
				
				Arrays.sort(compteurCasesPossedesQuartier);
				int joueurPossedePlusGrandNombreBlocs = compteurCasesPossedesQuartier[3];
				this.ajouterPoints(couleursBlocsJoueurs[joueurPossedePlusGrandNombreBlocs], 2);
				
				for (int l=0 ; l<4 ;l=l+1)
				{
					compteurCasesPossedesQuartier[l] = 0;
				}
			}
		}
	}
	
	public void compterNombrePointsPossedeSurMap()
	{
		int[] compteurCasesPossedesQuartier = new int[] {0, 0, 0, 0};
		String[] couleursBlocsJoueurs = {"Jaune", "Violet", "Bleu", "Orange"};
		
		for (int i=0 ; i < this.m.getNbQuartiers() ; i=i+1)
		{
			Quartier q = this.m.getQuartier(i);
			int nbLignes = q.getNbLignes();
			int nbColonnes = q.getNbColonnes();
			
			for (int j=0 ; j<nbLignes ; j=j+1)
			{
				for (int k=0 ; k<nbColonnes ; k=k+1)
				{
					Case c = q.getCase(j, k);
					int nbBlocsCase = c.getListeBlocs().size();
					
					if (nbBlocsCase != 0)
					{
						Bloc dernierBloc = c.getListeBlocs().get(nbBlocsCase - 1);
						String couleurDernierBloc = dernierBloc.getCouleur();
						
						if (couleurDernierBloc == "Jaune")
						{
							compteurCasesPossedesQuartier[0] = compteurCasesPossedesQuartier[0] + 1;
						}
						else if (couleurDernierBloc == "Violet")
						{
							compteurCasesPossedesQuartier[1] = compteurCasesPossedesQuartier[1] + 1;
						}
						else if (couleurDernierBloc == "Bleu")
						{
							compteurCasesPossedesQuartier[2] = compteurCasesPossedesQuartier[2] + 1;
						}
						else if (couleurDernierBloc == "Orange")
						{
							compteurCasesPossedesQuartier[2] = compteurCasesPossedesQuartier[2] + 1;
						}
					}
							
				}
			}
			
		}
		
		for (int joueur=0 ; joueur<4 ; joueur=joueur+1)
		{
			int nbBlocsPossedeJoueur = compteurCasesPossedesQuartier[joueur];
			this.ajouterPoints(couleursBlocsJoueurs[joueur], 1*nbBlocsPossedeJoueur);
		}
	}
	
}

public int recherchePlusGrand(int[] tableau)
{
	int plusGrand = -1;
	for (int i=0 ; i<tableau.length ; i=i+1)
	{
		if (tableau[i] > plusGrand)
		{
			plusGrand = tableau[i];
		}
	}
	return plusGrand;
}


// ----------------------------- CODE D'ELIOTT -------------------------------------------------
	

	public void compterNombrePointPossede() {
		for(int i=0;i<m.getListeQuartiers().length;i++) {
			for(int j=0;j<m.getQuartier(0).getListeCases().length;j++) {
				if(m.getQuartier(i).getCase(i, j).getListeBlocs().isEmpty()) {
					String couleur = null;
				}
				else{ 
					int lastBloc = m.getQuartier(i).getCase(i, j).getListeBlocs().lastIndexOf(m.getQuartier(i).getCase(i, j).getListeBlocs());
					String couleur = m.getQuartier(i).getCase(i, j).getListeBlocs().get(lastBloc).getCouleur();
				
					for(int x=0;x<this.listeJoueurs.size();x++) {
						if(this.listeJoueurs.get(x).getListBlocs().getCouleur().equals(couleur)) {
							this.listeJoueurs.get(x).setNbPoints(this.listeJoueurs.get(x).getNbPoints()+1);
						}
					}
				}
			}
		}
	}
	
	
	public void compterNombrePointMajorite() {
		for(int i=0;i<m.getListeQuartiers().length;i++) {
			int compteViolet=0;
			int compteJaune=0;
			int compteBleu=0;
			int compteOrange=0;
			for(int j=0;j<m.getQuartier(i).getListeCases().length;j++) {
				int lastBloc = m.getQuartier(i).getCase(i, j).getListeBlocs().lastIndexOf(m.getQuartier(i).getCase(i, j).getListeBlocs());
				String couleur = m.getQuartier(i).getCase(i, j).getListeBlocs().get(lastBloc).getCouleur();
				if(couleur.equals("Violet"))  compteViolet += 1;
				else if(couleur.equals("Jaune"))  compteJaune += 1;
				else if(couleur.equals("Bleu"))  compteBleu += 1;
				else if(couleur.equals("Orange"))  compteOrange += 1;
				
			}
			
			if(compteViolet> compteJaune && compteViolet > compteBleu && compteViolet>compteOrange) {
				for(int x=0;x<this.listeJoueurs.size();i++) {
					if(this.listeJoueurs.get(x).getListBlocs().getCouleur().equals("Violet")) {
						this.listeJoueurs.get(x).setNbPoints(this.listeJoueurs.get(x).getNbPoints()+2);
						System.out.println("Gagnant par majorité du quartier "+i+" : "+this.listeJoueurs.get(x).getPseudo());
					}
				}
			}
			
			else if(compteJaune> compteViolet && compteJaune > compteBleu && compteJaune>compteOrange) {
				for(int x=0;x<this.listeJoueurs.size();i++) {
					if(this.listeJoueurs.get(x).getListBlocs().getCouleur().equals("Jaune")) {
						this.listeJoueurs.get(x).setNbPoints(this.listeJoueurs.get(x).getNbPoints()+2);
						System.out.println("Gagnant par majorité du quartier "+i+" : "+this.listeJoueurs.get(x).getPseudo());
					}
				}
			}
			
			else if(compteBleu> compteViolet && compteBleu > compteJaune && compteBleu>compteOrange) {
				for(int x=0;x<this.listeJoueurs.size();i++) {
					if(this.listeJoueurs.get(x).getListBlocs().getCouleur().equals("Bleu")) {
						this.listeJoueurs.get(x).setNbPoints(this.listeJoueurs.get(x).getNbPoints()+2);
						System.out.println("Gagnant par majorité du quartier "+i+" : "+this.listeJoueurs.get(x).getPseudo());
					}
				}
			}
			
			else if(compteOrange> compteViolet && compteOrange > compteJaune && compteOrange>compteBleu) {
				for(int x=0;x<this.listeJoueurs.size();i++) {
					if(this.listeJoueurs.get(x).getListBlocs().getCouleur().equals("Orange")) {
						this.listeJoueurs.get(x).setNbPoints(this.listeJoueurs.get(x).getNbPoints()+2);
						System.out.println("Gagnant par majorité du quartier "+i+" : "+this.listeJoueurs.get(x).getPseudo());
					}
				}
			}
		}
	}
	
	
}

*/